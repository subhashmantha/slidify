}
manipulate(myHist(mu), mu = slider(-1.45, 0.91, step = 0.01))
library(manipulate)
myHist <- function(mu){
hist(x,col="blue",breaks=10)
lines(c(mu, mu), c(-1.45, 0.91),col="red",lwd=5)
mse <- mean(w*(x - mu)^2)
mse
text( paste(1,3,"mu = ", mu))
text(paste(5,3,"MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(-1.45, 0.91, step = 0.01))
library(manipulate)
myHist <- function(mu){
hist(x,col="blue",breaks=10)
lines(c(mu, mu), c(-1.45, 0.91),col="red",lwd=5)
mse <- mean(w*(x - mu)^2)
mse
text( 1,3,paste("mu = ", mu))
text(1,4, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(-1.45, 0.91, step = 0.01))
for i in (-1.45:0.91)
for (i in -1.45:0.91)
{mse<-mean(w*(x-i)^2)}
for (i in -1.45:0.91)
{}
for (i in -1.45:0.91)
{mse<-mean(w*(x-i)^2)
mse
i=i+0.01}
mse
print(mse)
for (i in -1.45:0.91)
{mse<-mean(w*(x-i)^2)
print(mse)
i=i+0.01}
i=-1.45
while (i < 0.92)
{mse<-mean(w*(x-i)^2)
print(mse)
i=i+0.01
}
i=-1.45
while (i < 0.92)
{mse<-mean(w*(x-i)^2)
print(mse,i)
i=i+0.01
}
i=-1.45
while (i < 0.92)
{mse<-mean(w*(x-i)^2)
print(mse)
print(i)
i=i+0.01
}
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
z<-lm(formula=y~0+x)
summary(z)
data(mtcars)
mtcars
cars<-lm(formula=mtcars$mpg~mtcars$wt)
summary(z)
summary(cars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xm<-mean(x)
x-xm
stdx<-std(x)
stdx<-stdev(x)
stdx<-sd(x)
(x-xm)/stdx
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
z<-lm(formula=y~x)
summary(z)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
z<-lm(formula=y~x)
summary(z)
predict(cars,mean(cars$wt), interval="predict")
predict(cars,mean(mtcars$wt), interval="predict")
View(mtcars)
View(mtcars)
summary(cars)
cars2<-lm(formula=mtcars$mpg~0+mtcars$wt)
summary(cars2)
newdata=data.frame(wt=3000)
predict(cars,newdata$wt, interval="predict")
predict(cars,newdata, interval="predict")
cars3<-lm(cars$mpg~cars$wt)
cars3<-lm(mtcars$mpg~mtcars$wt)
predict(cars3,newdata, interval="predict")
predict(cars3,newdata(wt), interval="predict")
predict(cars3,newdata$wt, interval="predict")
predict(cars3,newdata=newdata, interval="predict")
predict(cars3,newdata=newdata, interval="predict")
mtcars<-rbind(mtcars,newdata)
newdata<-data.frame(wt=3000)
predict(cars3,newdata=newdata, interval="predict")
predict(cars3,newdata, interval="predict")
newdata<-data.frame(mpg=0,cyl=0,disp=0,hp=0,wt=3000,qsec=0,vs=0,am=0,gear=0,carb=0)
mtcars<-rbind(mtcars,newdata)
newdata<-data.frame(row.names="xxx",mpg=0,cyl=0,disp=0,hp=0,drat=0,wt=3000,qsec=0,vs=0,am=0,gear=0,carb=0)
mtcars<-rbind(mtcars,newdata)
predict(cars3,mtcars, interval="predict")
quit(0)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
dfbetas(fit)
hatvalues(fit)
plot(y,x)
cars<-lm(mtcars$mpg~mtcars$wt+factor(mtcars$cyl))
summary(cars)
cars2<-lm(mtcars$mpg~mtcars$wt)
anova(cars,cars2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars)
require(lmtest)
install.packages('lmtest')
require(lmtest)
lrtest(cars,cars2)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
library(caret)
library(caret)
data(AlzheimerDisease)
adData=<-data.frame(predictors)
adData<-data.frame(predictors)
trainIndex<-createDataPartition(diagnosis,p=0.5,list=FALSE)
training<-adData[trainIndex,]
test<-adData[-trainIndex,]
str(test)
str(training)
str(adData)
data(concrete)
set.seed(0.975)
set.seed(975)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[ inTrain,]
testing <- mixtures[ -inTrain,]
hist(training$SuperPlasticizer)
str(training)
hist(training$Superplasticizer)
table(training$Superplasticizer)
str(training)
library(hmisc)
install.packages('hmisc')
install.packages('Hmisc')
library(Hmisc)
??cut2
min(training$Compressivestrength)
min(training$Compressivestrength,na.rm=T)
str(training)
min(training$CompressiveStrength,na.rm=T)
max()
max(training$CompressiveStrength,na.rm=T)
x<-c(2.0:82.0,0.25)
x
x<-seq(from=2.0,to=82.0,by=0.25)
x
training$y<-cut2(training$CompressiveStrength,x)
plot(training$y,training$CompressiveStrength)
x<-seq(from=2.0,to=82.0,by=8)
training$y<-cut2(training$CompressiveStrength,x)
plot(training$y,training$CompressiveStrength)
quit
quit()
pairs(~mpg+disp+drat+wt,data=mtcars,main="Simple Scatterplot Matrix")
pairs(~mpg+disp+drat+wt+am+gear+carb+vs+qsec,data=mtcars,main="Simple Scatterplot Matrix")
pairs(mpg~disp+drat+wt+am+gear+carb+vs+qsec,data=mtcars)
lm(mpg~disp+drat+wt+am+gear+carb+vs+qsec,data=mtcars)
cor(mtcars, use="complete.obs", method="kendall")
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
library(caret)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
prComp<-prcomp(training)
str(training)
dim(training)
prComp<-prcomp(training,na.rm=T)
names(training)
training2<-training(,c(58,69))
training2<-training[,c(58:69)]
names(training2)
prComp<-prcomp(training2,na.rm=T)
prComp
library(caret)
library(AppliedPredictiveModeling)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[ -inTrain,]
training2<-training[,c(58:69)]
training3<-as.data.frame(scale(training[,c(58:69)]))
prComp<-prcomp(training3,na.rm=T)
prcomp
summary(prcomp)
prComp_a<-prcomp(training3,na.rm=T)
summary(prcomp_a)
summary(prComp_a)
quit()
library(MASS)
?shuttle
newmod<-glm(use~wind,data=shuttle,family="binomial")
summary(newmod)
exp(-0.03181)
exp(-0.25131)
newmod2<-glm(use~wind+magn,data=shuttle,family="binomial")
summary(newmod2)
exp(-0.03201)
?InsectSprays
str(InsectSprays)
newmod3<-glm(count~factor(spray),data=InsectSprays,family="poisson")
summary(newmod3)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lm(y~x-1)
lm(y~x)
plot(x,y)
lm(y~-1*(x<0)x+x(>0)*x)
x1<--1*(x<0)*x
x2<-1*(x>0)*x
x3<-cbind(1,x1,x2)
x3
lm(y~x3)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
intrain<- createDataPartition(y=segmentationOriginal$Case,p=0.7,list=FALSE)
training<-segmentationOriginal[intrain,]
testing<-segmentationOriginal[-intrain,]
str(training)
testing<-subset(segmentationOriginal(segmentationOriginal$Case=="Test"))
testing<-subset(segmentationOriginal[segmentationOriginal$Case=="Test",])
training<-subset(segmentationOriginal[segmentationOriginal$Case=="Train",])
set.seed(125)
modfit<-train(Class~.,method="rpart",data=training)
install.packages("e1071")
library("e1071")
modfit<-train(Class~.,method="rpart",data=training)
print(modfit$finalModel)
plot(modfit$finalModel,uniform=TRUE,main="Classification Tree")
text(modfit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modfit$finalModel)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(SAheart)
glmmod<-glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family="binomial",data=trainSA)
predict(glmmod)
predict(glmmod,newdata=testSA)
xa<-predict(glmmod)
xb<-trainSA$CHD
table(xa,xb)
xb
str(trainSA)
xb<-trainSA$CHD
xb
modglm<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial")
modglm<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
predict(modglm)
table(xb,predict(modglm))
str(modglm)
str(predict(modglm))
trainSA$chd
xb<-trainSA$chd
xb
table(xb,predict(modglm))
xa<-predict(modglm)
xa<-xa>0.5
xa
xb<-xb==0
xb
table(xb,xa)
63/(40+44+124+23)
xc<-testSA$chd==0
xd<-predict(modglm,testSA)>0.5
xd
table(xc,xd)
72/(34+42+117+38)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
quit("y")
quit("Y")
?quit
q(0)
str(vowel.train)
set.seed(33833)
modglm<-train(y~.,method="rf",data=vowel.train)
library(caret)
modglm<-train(y~.,method="rf",data=vowel.train)
rfNews()
modglm2<-train(y~.,method="gbm",data=vowel.train)
pred1<-predict(glmmod,newdata=vowel.test)
pred1<-predict(modglm,newdata=vowel.test)
pred2<-predict(modglm2,newdata=vowel.test)
summary(pred1)
summary(pred2)
str(pred1)
accuracy_rf<-(vowel.train$y==pred1)
accuracy_rf<-(vowel.test$y==pred1)
accuracy_gbm<-(vowel.test$y==pred2)
length(accuracy_rf[accuracy_rf==TRUE])/length(accuracy_rf)
length(accuracy_gbm[accuracy_gbm==TRUE])/length(accuracy_gbm)
accuracy_rf
vowel.train$y = factor(vowel.train$y);
vowel.test$y = factor(vowel.test$y);
modglm<-train(y~.,method="rf",data=vowel.train)
modglm2<-train(y~.,method="gbm",data=vowel.train)
pred1<-predict(modglm,newdata=vowel.test)
pred2<-predict(modglm2,newdata=vowel.test)
accuracy_rf<-(vowel.test$y==pred1)
accuracy_gbm<-(vowel.test$y==pred2)
accuracy_rf
length(accuracy_rf[accuracy_rf==TRUE])/length(accuracy_rf)
length(accuracy_gbm[accuracy_gbm==TRUE])/length(accuracy_gbm)
set.seed(33833)
modglm<-train(y~.,method="rf",data=vowel.train)
modglm2<-train(y~.,method="gbm",data=vowel.train)
pred1<-predict(modglm,newdata=vowel.test)
pred2<-predict(modglm2,newdata=vowel.test)
accuracy_rf<-(vowel.test$y==pred1)
accuracy_gbm<-(vowel.test$y==pred2)
length(accuracy_gbm[accuracy_gbm==TRUE])/length(accuracy_gbm)
length(accuracy_rf[accuracy_rf==TRUE])/length(accuracy_rf)
table(pred1,pred2)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
rf<-train(diagnosis~.,method="rf",data=training)
gbm<-train(diagnosis~.,method="gbm",data=training)
lda<-train(diagnosis~.,method="lda",data=training)
pred_rf<-predict(rf,newdata=testing)
pred_gbm<-predict(gbm,newdata=testing)
pred_lda<-predict(lda,newdata=testing)
xc<-data.frame(pred_rf,pred_gbm,pred_lda,testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(training)
modl_lasso<-train(CompressiveStrength~.,method="lasso",data=training)
?plot.enet
data(diabetes)
attach(diabetes)
object <- enet(x,y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
detach(diabetes)
data(diabetes)
attach(diabetes)
object <- enet(diabetes$x,diabetes$y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
detach(diabetes)
summary(modl_lasso)
set.seed(325)
library(e1071)
svm_tr<-svm(CompressiveStrength~.,data=training,cost=100,gamma=1)
svm_pred<-predict(svm_tr,testing)
summary(svm_pred)
svm_pred$RMSE
svm_pred
sqrt(mean (testing$CompressiveStrength-svm_pred)^2), na.rm=T)
sqrt(mean ((testing$CompressiveStrength-svm_pred)^2), na.rm=T)
sqrt(mean ((testing$CompressiveStrength-svm_pred)^2, na.rm=T))
sqrt(sum ((testing$CompressiveStrength-svm_pred)^2, na.rm=T))
sqrt(sum ((testing$CompressiveStrength-svm_pred)^2, na.rm=T)/1028)
sqrt(sum ((testing$CompressiveStrength-svm_pred)^2, na.rm=T)/nrow(testing))
sqrt(sum ((testing$CompressiveStrength-svm_pred)^2)/nrow(testing))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svm_tr<-svm(CompressiveStrength~.,data=training)
svm_pred<-predict(svm_tr,testing)
sqrt(sum ((testing$CompressiveStrength-svm_pred)^2)/nrow(testing))
length(accuracy_gbm[accuracy_gbm==TRUE])/length(accuracy_gbm)
length(accuracy_rf[accuracy_rf==TRUE])/length(accuracy_rf)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rf<-train(diagnosis~.,method="rf",data=training)
gbm<-train(diagnosis~.,method="gbm",data=training)
lda<-train(diagnosis~.,method="lda",data=training)
newframe<-data.frame(pre_rf(rf,newdata=testing),pre_gbm(gbm,newdata=testing),pre_lda(lda,newdata=testing),diagnosis=testing$diagnosis)
newframe<-data.frame(predict(rf,newdata=testing),predict(gbm,newdata=testing),predict(lda,newdata=testing),diagnosis=testing$diagnosis)
rf_new<-train(diagnosis~.,method="rf")
rf_new<-train(diagnosis~.,method="rf",data=newframe)
summary(rf_new)
table(newframe$diagnosis,predict(rf_new))
table(newframe$diagnosis,predict(rf_new,newdata=newframe))
table(testing$diagnosis,predict(rf,newdata=testing))
table(testing$diagnosis,predict(gbm,newdata=testing))
table(testing$diagnosis,predict(lda,newdata=testing))
getwd()
getwd()
inPredict <- read.table('pml-testing.csv',
header=TRUE,
as.is = TRUE,
stringsAsFactors = FALSE,
sep=',',
na.strings=c('NA','','#DIV/0!'))
inPredict$cvtd_timestamp <- unclass(as.POSIXct(strptime(inPredict$cvtd_timestamp,
'%d/%m/%Y  %H:%M')))
# Categories
cleanPredict <- data.frame(predict(dummyVars(~ user_name +
raw_timestamp_part_1 +
raw_timestamp_part_2 +
cvtd_timestamp +
num_window,
data=inPredict),
newdata=inPredict))
# use the same preprocess data object
cleanPredict[preProcessColumns] <- predict(preObj,
newdata=cleanPredict[preProcessColumns])
predictions     <- data.frame(C50=predict(modC50, cleanPredict))
predictions$RF  <- predict(modRF, cleanPredict)
predictions$GBM <- predict(modGBM, cleanPredict)
# vote
for (i in 1:dim(predictions)[1]){
theVote <- vote(as.character(predictions[i,'C50']),
as.character(predictions[i,'RF']),
as.character(predictions[i,'GBM']))
if(i == 1){
answers <- theVote
} else {
answers <- c(answers, theVote)
}
}
source('./helpers.R')
trainingData <- stripDerivedColumns(read.csv("pml-training.csv"))
trainingdata
trainingData
str(trainingData)
dataprcomp<-as.data.frame(scale(trainingData[1:50]))
inpr<-prcomp(dataprcomp)
summary(inpr)
dataprcomp<-as.data.frame(scale(trainingData[5:50]))
inpr<-prcomp(dataprcomp)
inpr<-prcomp(dataprcomp)
summary(inpr)
stripLowImportanceColumns(trainingData)
str(trainingData)
trainingData2<-stripLowImportanceColumns(trainingData)
str(trainingData2)
screeplot(inpr, type="lines")
dataprcomp<-as.data.frame(scale(trainingData[5:50]))
install.packages('devtools')
devtools::install_github('rshiny/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
deployApp()
shinyapps::setAccountInfo(name='subhash', token='8BC51C50222AB19D4D793B135BE50E9D', secret='Hye9szOqI4HBjBb3Y1ZbP6+nfbSDZAdSslyP7pxH')
deploApp()
deployApp()
shiny::runApp('Downloads/Shiny')
shiny::deployApp('Downloads/Shiny')
deployApp()
library(shiny)
deployApp()
library(shinyapps)
shinyapps::setAccountInfo(name='subhash', token='8BC51C50222AB19D4D793B135BE50E9D', secret='Hye9szOqI4HBjBb3Y1ZbP6+nfbSDZAdSslyP7pxH')
deployApp()
setwd("C:/users/smantha/documents/slidify")
slidify("index.RMD")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library('slidify')
slidify("index.RMD")
slidify("index.RMD",mode='selfcontained')
library("slidifyLibraries")
slidify("index.RMD")
